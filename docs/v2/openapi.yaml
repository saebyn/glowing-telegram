---
openapi: 3.1.1
info:
  title: Glowing Telegram API
  version: "2.0"
components:
  schemas:
    Series:
      $ref: "./schemas/Series.schema"
    Stream:
      $ref: "./schemas/Stream.schema"
    Episode:
      $ref: "./schemas/Episode.schema"
    Project:
      $ref: "./schemas/Project.schema"
    Profile:
      $ref: "./schemas/Profile.schema"
    StreamIngestionRequest:
      $ref: "./schemas/StreamIngestionRequest.schema"
    VideoClip:
      $ref: "./schemas/VideoClip.schema"
    IdOnly:
      $ref: "./schemas/IdOnly.schema"
    Record:
      type: object
      oneOf:
        - $ref: "#/components/schemas/Series"
        - $ref: "#/components/schemas/Stream"
        - $ref: "#/components/schemas/Episode"
        - $ref: "#/components/schemas/Project"
        - $ref: "#/components/schemas/Profile"
        - $ref: "#/components/schemas/VideoClip"
    TwitchAuthRequest:
      $ref: "./schemas/TwitchAuthRequest.schema"
    AuthorizationUrlResponse:
      $ref: "./schemas/AuthorizationUrlResponse.schema"
    TwitchCallbackRequest:
      $ref: "./schemas/TwitchCallbackRequest.schema"
    TwitchCallbackResponse:
      $ref: "./schemas/TwitchCallbackResponse.schema"
    AccessTokenResponse:
      $ref: "./schemas/AccessTokenResponse.schema"
    SimpleChatMessage:
      $ref: "./schemas/SimpleChatMessage.schema"
    SubscribeChatRequest:
      $ref: "./schemas/SubscribeChatRequest.schema"
    SubscribeChatResponse:
      $ref: "./schemas/SubscribeChatResponse.schema"
    EventSubSubscription:
      $ref: "./schemas/EventSubSubscription.schema"
    ChatSubscriptionStatusResponse:
      $ref: "./schemas/ChatSubscriptionStatusResponse.schema"
    RenderRequest:
      $ref: "./schemas/RenderRequest.schema"

  responses:
    Error:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
paths:
  /ai/chat:
    post:
      summary: Chat with AI
      tags:
        - chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    $ref: "#/components/schemas/SimpleChatMessage"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/SimpleChatMessage"
        "400":
          $ref: "#/components/responses/Error"
        "500":
          $ref: "#/components/responses/Error"
  /records/{resource}:
    get:
      summary: List records
      tags:
        - list
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
            format: json
            content:
              application/json:
                schema:
                  type: object
        - name: cursor
          in: query
          schema:
            type: string
        - name: perPage
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Record"
                  cursor:
                    type: string
        "400":
          $ref: "#/components/responses/Error"
        "500":
          $ref: "#/components/responses/Error"
    post:
      summary: Create a record
      tags:
        - create
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Record"
                - $ref: "#/components/schemad/StreamIngestionRequest"
      responses:
        "201":
          description: Record created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Record"
                  - $ref: "#/components/schemas/IdOnly"
        "400":
          $ref: "#/components/responses/Error"
        "500":
          $ref: "#/components/responses/Error"
  /records/{resource}/{record_id}:
    get:
      summary: Get a record
      tags:
        - get
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
        - name: record_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Record"
        "400":
          $ref: "#/components/responses/Error"
        "404":
          description: Record not found
          $ref: "#/components/responses/Error"
        "500":
          $ref: "#/components/responses/Error"
    put:
      summary: Update a record
      tags:
        - update
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
        - name: record_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Record"
      responses:
        "200":
          description: Record updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Record"
        "400":
          $ref: "#/components/responses/Error"
        "500":
          $ref: "#/components/responses/Error"
    delete:
      summary: Delete a record
      tags:
        - delete
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
        - name: record_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Record deleted
        "400":
          $ref: "#/components/responses/Error"
        "500":
          $ref: "#/components/responses/Error"
  /records/{resource}/{related_field}/{id}:
    get:
      summary: Get related records
      tags:
        - get
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
        - name: related_field
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Record"
                  cursor:
                    type: string
        "400":
          $ref: "#/components/responses/Error"
        "500":
          $ref: "#/components/responses/Error"
  /records/{resource}/many:
    get:
      summary: Get many records
      tags:
        - get
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Record"
        "400":
          $ref: "#/components/responses/Error"
        "500":
          $ref: "#/components/responses/Error"
  /auth/twitch/url:
    post:
      summary: Obtain Twitch authorization URL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwitchAuthRequest"
      responses:
        "200":
          description: Authorization URL
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationUrlResponse"
  /auth/twitch/callback:
    get:
      summary: Handle Twitch callback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Callback handled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwitchCallbackResponse"
  /auth/twitch/token:
    get:
      summary: Obtain Twitch access token
      responses:
        "200":
          description: Access token response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenResponse"
  /eventsub/chat/subscribe:
    post:
      summary: Subscribe to Twitch chat events
      tags:
        - twitch
        - eventsub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscribeChatRequest"
      responses:
        "200":
          description: Successfully created EventSub subscription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscribeChatResponse"
        "400":
          $ref: "#/components/responses/Error"
        "401":
          description: Unauthorized - invalid or missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscribeChatResponse"
        "500":
          $ref: "#/components/responses/Error"
  /eventsub/chat/status:
    get:
      summary: Check EventSub chat subscription status
      tags:
        - twitch
        - eventsub
      responses:
        "200":
          description: Chat subscription status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatSubscriptionStatusResponse"
        "401":
          description: Unauthorized - invalid or missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatSubscriptionStatusResponse"
        "500":
          $ref: "#/components/responses/Error"
  /eventsub/webhook:
    post:
      summary: Handle Twitch EventSub webhooks
      tags:
        - twitch
        - eventsub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: EventSub webhook payload
      responses:
        "200":
          description: Challenge verification response
          content:
            text/plain:
              schema:
                type: string
        "204":
          description: Event processed successfully
        "400":
          description: Invalid request
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: Server error
          content:
            text/plain:
              schema:
                type: string
  /render:
    post:
      summary: Render a video
      tags:
        - render
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenderRequest"
      responses:
        "200":
          description: Render started
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message indicating number of jobs submitted
                  totalEpisodes:
                    type: integer
                    description: Total number of episodes in the request
                  jobChunks:
                    type: integer
                    description: Number of job chunks created
                  jobs:
                    type: array
                    description: Array of submitted job details
                    items:
                      type: object
                      properties:
                        jobId:
                          type: string
                          description: AWS Batch job ID
                        episodeIds:
                          type: array
                          description: Episode IDs included in this job
                          items:
                            type: string
                        chunkIndex:
                          type: integer
                          description: Index of this chunk (0-based)
                      required:
                        - jobId
                        - episodeIds
                        - chunkIndex
                required:
                  - message
                  - totalEpisodes
                  - jobChunks
                  - jobs
        "400":
          $ref: "#/components/responses/Error"
        "500":
          $ref: "#/components/responses/Error"
