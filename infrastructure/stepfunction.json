{
	"Comment": "An AWS Step Functions state machine that transcribes audio to text and summarizes the transcription using AWS Batch and AWS Lambda across multiple videos",
	"StartAt": "Set up state",
	"States": {
		"Set up state": {
			"Type": "Pass",
			"Comment": "Set up the initial state with the stream ID, initial prompt and summary, the iterator to 0",
			"Next": "Get stream from DynamoDB",
			"Parameters": {
				"iterator": {
					"index": 0
				},
				"context": {
					"transcription.$": "$.initialPrompt",
					"summarization.$": "$.initialSummary"
				},
				"stream_id.$": "$.streamId"
			}
		},
		"Get stream from DynamoDB": {
			"Type": "Task",
			"Comment": "Get the stream record from the DynamoDB table",
			"Resource": "arn:aws:states:::dynamodb:getItem",
			"Parameters": {
				"TableName": "${streamTableName}",
				"Key": {
					"id": {
						"S.$": "$.stream_id"
					}
				}
			},
			"ResultPath": "$.streamRecord",
			"Next": "List video objects"
		},
		"List video objects": {
			"Type": "Task",
			"Comment": "List the objects in the S3 bucket with the prefix from the stream record",
			"Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
			"Parameters": {
				"Bucket": "${videoBucketName}",
				"Prefix.$": "$.streamRecord.Item.prefix.S"
			},
			"ResultPath": "$.listResult",
			"Next": "Parse video keys"
		},
		"Parse video keys": {
			"Comment": "Parse the video keys from the list of objects, adding them to the context as `videoKeys` and setting the count for the iterator",
			"Type": "Pass",
			"Parameters": {
				"videoKeys.$": "$.listResult.Contents[*].Key",
				"count.$": "States.ArrayLength($.listResult.Contents[*].Key)",
				"context.$": "$.context",
				"stream_id.$": "$.stream_id",
				"iterator.$": "$.iterator"
			},
			"ResultPath": "$",
			"Next": "Loop over Videos"
		},
		"Loop over Videos": {
			"Comment": "Loop over the video keys, getting the item from DynamoDB, checking if the transcription already exists, transcribing the audio to text, summarizing the transcription, updating the stream ID in the metadata, and incrementing the index",
			"Type": "Choice",
			"Choices": [
				{
					"Variable": "$.iterator.index",
					"NumericLessThanPath": "$.count",
					"Next": "GetItem from DynamoDB"
				}
			],
			"Default": "Success"
		},
		"GetItem from DynamoDB": {
			"Comment": "Get the item from the DynamoDB table using the video key",
			"Type": "Task",
			"Resource": "arn:aws:states:::dynamodb:getItem",
			"Parameters": {
				"TableName": "${metadataTableName}",
				"ProjectionExpression": "#k, audio, transcription",
				"Key": {
					"key": {
						"S.$": "States.ArrayGetItem($.videoKeys, $.iterator.index)"
					}
				},
				"ExpressionAttributeNames": {
					"#k": "key"
				}
			},
			"Next": "Check if transcription already exists",
			"ResultPath": "$.dynamodb"
		},
		"Check if transcription already exists": {
			"Comment": "Check if the transcription already exists in the item",
			"Type": "Choice",
			"Choices": [
				{
					"Variable": "$.dynamodb.Item.transcription",
					"IsPresent": true,
					"Next": "Summarize Transcription"
				}
			],
			"Default": "Transcribe Audio to Text"
		},
		"Transcribe Audio to Text": {
			"Comment": "Transcribe the audio to text using AWS Batch",
			"Type": "Task",
			"Resource": "arn:aws:states:::batch:submitJob.sync",
			"Parameters": {
				"JobDefinition": "${audioTranscriberJobDefinitionArn}",
				"JobQueue": "${audioTranscriberJobQueueArn}",
				"Parameters": {
					"input_key.$": "$.dynamodb.Item.audio.S",
					"item_key.$": "$.dynamodb.Item.key.S",
					"language": "en",
					"initial_prompt.$": "$.context.transcription"
				},
				"JobName": "transcribe-audio"
			},
			"ResultPath": null,
			"Next": "GetItem from DynamoDB"
		},
		"Summarize Transcription": {
			"Comment": "Summarize the transcription using AWS Lambda, which will call the OpenAI API and update the record in DynamoDB",
			"Type": "Task",
			"Resource": "arn:aws:states:::lambda:invoke",
			"Parameters": {
				"Payload": {
					"input_key.$": "$.dynamodb.Item.key.S",
					"transcription.$": "$.dynamodb.Item.transcription.M.segments",
					"transcription_context.$": "$.context.transcription",
					"summarization_context.$": "$.context.summarization"
				},
				"FunctionName": "${summarizeTranscriptionFunctionArn}"
			},
			"Retry": [
				{
					"ErrorEquals": [
						"Lambda.ServiceException",
						"Lambda.AWSLambdaException",
						"Lambda.SdkClientException",
						"Lambda.TooManyRequestsException"
					],
					"IntervalSeconds": 1,
					"MaxAttempts": 3,
					"BackoffRate": 2
				}
			],
			"ResultSelector": {
				"summarization.$": "$.Payload.summarization_context",
				"transcription.$": "$.Payload.transcription_context"
			},
			"ResultPath": "$.context",
			"Next": "Update stream_id in metadata"
		},
		"Update stream_id in metadata": {
			"Comment": "Update the stream ID in the metadata table so that the video is associated with the stream",
			"Type": "Task",
			"Resource": "arn:aws:states:::dynamodb:updateItem",
			"Parameters": {
				"TableName": "${metadataTableName}",
				"Key": {
					"key": {
						"S.$": "$.dynamodb.Item.key.S"
					}
				},
				"UpdateExpression": "SET stream_id = :streamId",
				"ExpressionAttributeValues": {
					":streamId": {
						"S.$": "$.stream_id"
					}
				}
			},
			"ResultPath": null,
			"Next": "Increment index"
		},
		"Increment index": {
			"Comment": "Increment the index for the iterator and loop over the videos",
			"Type": "Pass",
			"Next": "Loop over Videos",
			"Parameters": {
				"index.$": "States.MathAdd(1, $.iterator.index)"
			},
			"ResultPath": "$.iterator"
		},
		"Success": {
			"Comment": "The state machine has successfully processed all videos for the stream",
			"Type": "Succeed"
		}
	}
}
