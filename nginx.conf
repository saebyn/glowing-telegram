#
# This nginx configuration file is used to serve our microservice APIs and
# the frontend application.
#
# All of the applications are running in docker containers and are
# accessible via the docker network on port 3000.
#
# The API endpoints are served on the /api path,
# and are proxied to each of the api containers:
# - ai_api
# - crud_api
# - stream_ingestion_api

# docker settings for the nginx container
error_log /dev/stdout;
worker_rlimit_nofile 8192;

events {
    worker_connections 4096;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    index index.html;

    log_format main '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent"';

    access_log /dev/stdout main;

    sendfile on;
    tcp_nopush on;

    proxy_read_timeout 300; proxy_connect_timeout 300; proxy_send_timeout 300;

    server {
        listen 80;
        listen [::]:80;

        server_name _;

        # TODO enable this once we have a valid certificate
        #return 301 https://$host$request_uri;

        location ^~ /api/records/tasks {
            proxy_pass http://api:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400s;
            rewrite ^/api/records(.*)$ $1 break;
        }

        location ^~ /api/records/twitchStreams {
            proxy_pass http://api:3000;
            rewrite ^/api/records/twitchStreams(.*)$ /twitch/videos$1 break;
        }

        location /api {
            proxy_pass http://api:3000;
            rewrite ^/api(.*)$ $1 break;
        }

        # The frontend SPA application is served on the root path.
        location / {
            proxy_pass http://frontend:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}