version: "3"
name: video_processing_project

x-backend-variables: &backend-variables
  HOST: 0.0.0.0
  PORT: 3000
  RUST_LOG: trace
  RUST_BACKTRACE: 1
  CORS_ALLOWED_ORIGINS: http://localhost:8080
  TASK_API_URL: http://task_api:3000/tasks
  TASK_API_EXTERNAL_URL: http://localhost:8080/api/records/tasks

services:
  proxy:
    image: nginx:1.25.1-alpine
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      # nginx:1.25.1-alpine does not have curl installed
      test: ["CMD", "wget", "-q", "--spider", "--tries=1", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - frontend
      - ai_api
      - crud_api
      - stream_ingestion_api
      - silence_detection_api
      - transcription_api
      - task_api
      - twitch_api
      - youtube_api

  twitch_bot:
    build:
      context: twitch_bot
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./twitch_key.txt:/twitch_key
    environment:
      TWITCH_CHANNEL: $TWITCH_CHANNEL
      TWITCH_CLIENT_ID: "your_client_id"
      TWITCH_CLIENT_SECRET_PATH: /twitch_key
      TWITCH_BOT_USERNAME: "your_bot_username"
      TWITCH_BOT_OAUTH: "your_bot_oauth"

  # run our frontend in dev mode with hot module reloading for vite
  frontend:
    image: node:18-alpine
    command: sh -c "npm install && npm run dev"
    working_dir: /app
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      # From end user perspective
      VITE_API_URL: http://localhost:8080/api
    healthcheck:
      # node:18-alpine does not have curl installed
      test: ["CMD", "wget", "-q", "--spider", "--tries=1", "http://localhost:3000"]
      interval: 60s
      timeout: 30s
      retries: 5

  ai_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=ai_api
        - DEBIAN_VERSION=bookworm-slim
        - RUST_VERSION=1.78
    restart: always
    volumes:
      - ./openai_key.txt:/openai_key
    environment:
      OPENAI_KEY_PATH: /openai_key
      OPENAI_MODEL: gpt-4o
      <<: *backend-variables

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  crud_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=crud_api
        - DEBIAN_VERSION=bookworm-slim
        - RUST_VERSION=1.78
    restart: always
    depends_on:
      - db
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/video_processing_project
      <<: *backend-variables
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  stream_ingestion_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=stream_ingestion_api
        - DEBIAN_VERSION=bookworm-slim
        - RUST_VERSION=1.78
    restart: always
    environment:
      VIDEO_STORAGE_PATH: /obs
      RENDERED_EPISODE_STORAGE_PATH: /renders
      <<: *backend-variables
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - obs:/obs
      - renders:/renders

  silence_detection_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=silence_detection_api
        - DEBIAN_VERSION=bookworm-slim
        - RUST_VERSION=1.78
    restart: always
    environment:
      VIDEO_STORAGE_PATH: /obs
      NOISE: 0.004
      DURATION: 2.0
      THIS_API_BASE_URL: http://silence_detection_api:3000
      <<: *backend-variables
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - obs:/obs

  transcription_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=transcription_api
        - DEBIAN_VERSION=bookworm-slim
        - RUST_VERSION=1.78
    restart: always
    environment:
      VIDEO_STORAGE_PATH: /obs
      MODEL_PATH: /model
      THIS_API_BASE_URL: http://transcription_api:3000
      <<: *backend-variables
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - obs:/obs
      - model:/model
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  task_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=task_api
        - DEBIAN_VERSION=bookworm-slim
        - RUST_VERSION=1.78
    restart: always
    environment:
      <<: *backend-variables
      REDIS_URL: redis://redis:6379
      QUEUE_NAME: task_queue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  task_worker:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=task_worker
        - DEBIAN_VERSION=bookworm-slim
        - RUST_VERSION=1.78
    restart: always
    environment:
      <<: *backend-variables
      REDIS_URL: redis://redis:6379
      QUEUE_NAME: task_queue
    deploy:
      mode: replicated
      replicas: 2

  twitch_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=twitch_api
        - DEBIAN_VERSION=bookworm-slim
        - RUST_VERSION=1.78
    restart: always
    volumes:
      - ./twitch_key.txt:/twitch_client_secret
    environment:
      <<: *backend-variables
      TWITCH_USER_ID: ${TWITCH_USER_ID}
      TWITCH_CLIENT_ID: ${TWITCH_CLIENT_ID}
      TWITCH_CLIENT_SECRET_PATH: /twitch_client_secret
      REDIRECT_URL: http://localhost:8080/twitch/callback
      REDIS_URL: redis://redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  youtube_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=youtube_upload_api
        - DEBIAN_VERSION=bookworm-slim
        - RUST_VERSION=1.78
    restart: always
    environment:
      <<: *backend-variables
      YOUTUBE_AUTH_URI: ${YOUTUBE_AUTH_URI}
      YOUTUBE_TOKEN_URI: ${YOUTUBE_TOKEN_URI}
      YOUTUBE_CLIENT_ID: ${YOUTUBE_CLIENT_ID}
      YOUTUBE_CLIENT_SECRET_PATH: /youtube_client_secret
      THIS_API_BASE_URL: http://youtube_api:3000
      REDIRECT_URL: http://localhost:8080/youtube/callback
      REDIS_URL: redis://redis:6379
      RENDER_STORAGE_PATH: /renders
    volumes:
      - ./youtube_key.txt:/youtube_client_secret
      - renders:/renders
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres:15-alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: video_processing_project
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis
    restart: always
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  obs:
  renders:
  audio:
  model:
  postgres_data:
  redis_data:
