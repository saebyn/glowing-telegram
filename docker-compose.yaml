version: "3"
name: video_processing_project

x-backend-variables: &backend-variables
  HOST: 0.0.0.0
  PORT: 3000
  RUST_LOG: trace
  RUST_BACKTRACE: 1
  CORS_ALLOWED_ORIGINS: http://localhost:8080

services:
  proxy:
    image: nginx:1.25.1-alpine
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - ai_api
      - crud_api
      - stream_ingestion_api
      - silence_detection_api

  # run our frontend in dev mode with hot module reloading for vite
  frontend:
    image: node:18-alpine
    command: sh -c "npm install && npm run dev"
    working_dir: /app
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      # From end user perspective
      VITE_API_URL: http://localhost:8080/api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 60s
      timeout: 30s
      retries: 5

  ai_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=ai_api
    restart: always
    volumes:
      - ./openai_key.txt:/openai_key
    environment:
      OPENAI_KEY_PATH: /openai_key
      <<: *backend-variables

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  crud_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=crud_api
    restart: always
    depends_on:
      - db
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/video_processing_project
      <<: *backend-variables
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  stream_ingestion_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=stream_ingestion_api
    restart: always
    environment:
      VIDEO_STORAGE_PATH: /obs
      <<: *backend-variables
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - obs:/obs

  silence_detection_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=silence_detection_api
    restart: always
    environment:
      VIDEO_STORAGE_PATH: /obs
      NOISE: 0.004
      DURATION: 2.0
      <<: *backend-variables
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - obs:/obs

  task_api:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=task_api
    restart: always
    environment:
      <<: *backend-variables
      REDIS_URL: redis://redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  task_worker:
    build:
      context: .
      dockerfile: Dockerfile.rust
      args:
        - SERVICE_NAME=task_worker
    restart: always
    environment:
      <<: *backend-variables
      REDIS_URL: redis://redis:6379
      QUEUE_NAME: task_queue

  db:
    image: postgres:15-alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: video_processing_project
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis
    restart: always
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  obs:
  audio:
  postgres_data:
  redis_data:
